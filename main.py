import json
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
BOT_TOKEN = "7805627856:AAEl3LjfN_Yuc-XAaCVH_rZvt_KzGiHJPgY"

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏
with open("restaurants.json", "r", encoding="utf-8") as file:
    restaurants_data = json.load(file)

# üìç –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = (
    "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
    "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ <b>—Ö–∞–ª—è–ª—å–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã</b> –≤ –°–®–ê! üá∫üá∏\n\n"
    "üìå <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
    "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —à—Ç–∞—Ç.\n"
    "2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å –∞–¥—Ä–µ—Å–∞–º–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏.\n"
    "3Ô∏è‚É£ –£–∑–Ω–∞–π—Ç–µ, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞.\n\n"
    "üçΩ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!\n"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º —à—Ç–∞—Ç–æ–≤ (–ø–æ 3 –≤ —Ä—è–¥)
def create_states_keyboard():
    buttons = [KeyboardButton(text=state) for state in restaurants_data.keys()]
    keyboard = ReplyKeyboardMarkup(keyboard=[buttons[i:i+3] for i in range(0, len(buttons), 3)], resize_keyboard=True)
    return keyboard

# üìç –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(WELCOME_MESSAGE, reply_markup=create_states_keyboard())

# üìç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à—Ç–∞—Ç–∞
@dp.message()
async def process_state(message: types.Message):
    state = message.text.strip()
    
    if state not in restaurants_data:
        await message.answer("‚ùå <b>–¢–∞–∫–æ–≥–æ —à—Ç–∞—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!</b>\nüîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.", reply_markup=create_states_keyboard())
        return
    
    restaurants = restaurants_data.get(state, [])

    if not restaurants:
        await message.answer(
            f"‚ùå <b>–í —ç—Ç–æ–º —à—Ç–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤.</b>\n"
            "üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —à—Ç–∞—Ç!",
            reply_markup=create_states_keyboard()
        )
    else:
        response = f"üìç <b>–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –≤ —à—Ç–∞—Ç–µ {state}:</b>\n\n"
        for i, restaurant in enumerate(restaurants, start=1):
            phones = "\nüìû "+restaurant["phone"]
            response += (
                f"üçΩ <b>{restaurant['name']}</b>\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> {restaurant['address']}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phones}\n"
                f"üöô <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {restaurant['delivery']}\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            )
        await message.answer(response, reply_markup=create_states_keyboard())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
