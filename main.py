import json
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, StateFilter, Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest

from admin import admin_router, ADMIN_IDS
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO, 
    filename="bot.log",  
    filemode="a",  # a - append
    format="%(asctime)s - %(levelname)s - %(message)s"
)


BOT_TOKEN = "7805627856:AAEl3LjfN_Yuc-XAaCVH_rZvt_KzGiHJPgY"

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()

# –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏
def load_restaurants():
    global restaurants_data
    try:
        with open("restaurants.json", "r", encoding="utf-8") as file:
            restaurants_data = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        restaurants_data = {}

# üìç –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = '''
üëã <b>Welcome!</b>  

üçΩ <i>Find the best fast food & restaurants near you!</i>  

üåç <b>Languages:</b>  
üá∫üáø <b>Sizga yaqin joylashgan</b> ‚Äì Tezkor oziq-ovqat va restoran qidiruvi.  
üá∫üá∏ <b>Fast food & restaurant search</b> ‚Äì Find the best places nearby.  
üá∑üá∫ <b>–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –µ–¥—ã</b> ‚Äì –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ —Ä—è–¥–æ–º —Å –≤–∞–º–∏.  

üçï Bon App√©tit! üöÄ
'''

def create_states_keyboard():
    buttons = [KeyboardButton(text=state) for state in restaurants_data.keys()]
    keyboard = ReplyKeyboardMarkup(keyboard=[buttons[i:i+3] for i in range(0, len(buttons), 3)], resize_keyboard=True)
    return keyboard

CHANNEL_ID = -1002616983549
CHANNEL_LINK = "https://t.me/halal_cafe_usa"

def create_subscription_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ", url=CHANNEL_LINK)],  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]  # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
    ])
    return keyboard
# üîπ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id: int, bot: Bot) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except TelegramBadRequest as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ {user_id}: {e}")
        return False

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def start_handler(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    load_restaurants()
    if message.chat.id != CHANNEL_ID:

        if not await check_subscription(message.from_user.id, bot):
            await message.answer(
                "üîπ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ:",
                reply_markup=create_subscription_keyboard()
            )
            return
        

          
        await message.answer(WELCOME_MESSAGE, reply_markup=create_states_keyboard())
    else:
        await message.reply("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏ –¥–≤–µ –±—É–∫–≤—ã —à—Ç–∞—Ç–∞ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n–ü—Ä–∏–º–µ—Ä:\n\n WA", reply_markup=create_states_keyboard())

@router.message(lambda message: message.chat.id == CHANNEL_ID and len(message.text) == 2 and message.text.isalpha())
async def group_chat_handler(message: types.Message):
    state = message.text.upper()
    load_restaurants()
    if state not in restaurants_data:
        return

    restaurants = restaurants_data.get(state, [])

    if not restaurants:
        await message.answer(
            f"‚ùå <b>–í —ç—Ç–æ–º —à—Ç–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤.</b>\n"
            "üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —à—Ç–∞—Ç!",
            reply_markup=create_states_keyboard()
        )
    else:
        response = f"üìç <b>–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –≤ —à—Ç–∞—Ç–µ {state}:</b>\n\n"
        for i, restaurant in enumerate(restaurants, start=1):
            # check if devlivery is No, just dont add id
            delivery = ""
            description = ""
            if restaurant["delivery"] != "No":
                delivery = f"üöô <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {restaurant['delivery']}"

            if restaurant["description"]:
                description = f"üìù <b>{restaurant['description']}</b>"

            response += (
                f"üçΩ <b>{restaurant['name']}</b>\n"
                f"üìû <b>Phone:</b> {restaurant['phone']}\n"
                f"üìç <b>Location:</b> {restaurant['address']}\n"
                f"{delivery}\n"
                f"{description}\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            )
        await message.answer(response)



# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
@router.callback_query(lambda c: c.data == "check_subscription")
async def check_subscription_callback(callback: types.CallbackQuery, bot: Bot):
    if await check_subscription(callback.from_user.id, bot):
        await callback.message.edit_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        load_restaurants()
        await callback.message.answer(WELCOME_MESSAGE, reply_markup=create_states_keyboard())
    else:
        await callback.answer("‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–∞–º–æ–º –±–æ—Ç–µ
@router.message(StateFilter(None), lambda message: message.text != '/newcafe' and message.chat.id != CHANNEL_ID)
async def process_state(message: types.Message):
    state = message.text.strip().upper()
    
    if state not in restaurants_data:
        await message.answer("‚ùå <b>–¢–∞–∫–æ–≥–æ —à—Ç–∞—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!</b>\nüîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.", reply_markup=create_states_keyboard())
        return
    
    restaurants = restaurants_data.get(state, [])

    if not restaurants:
        await message.answer(
            f"‚ùå <b>–í —ç—Ç–æ–º —à—Ç–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤.</b>\n"
            "üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —à—Ç–∞—Ç!",
            reply_markup=create_states_keyboard()
        )
    else:
        response = f"üìç <b>–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –≤ —à—Ç–∞—Ç–µ {state}:</b>\n\n"
        for i, restaurant in enumerate(restaurants, start=1):
            # check if devlivery is No, just dont add id
            delivery = ""
            description = ""
            if restaurant["delivery"] != "No":
                delivery = f"üöô <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {restaurant['delivery']}"

            if restaurant["description"]:
                description = f"üìù <b>{restaurant['description']}</b>"

            response += (
                f"üçΩ <b>{restaurant['name']}</b>\n"
                f"üìû <b>Phone:</b> {restaurant['phone']}\n"
                f"üìç <b>Location:</b> {restaurant['address']}\n"
                f"{delivery}\n"
                f"{description}\n"
                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            )
        await message.answer(response, reply_markup=create_states_keyboard())
        
dp.include_router(router)
dp.include_router(admin_router)
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("Bot started")
    asyncio.run(main())
